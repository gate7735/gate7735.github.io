3강 Why JS? : JS for Beginners

JavaScript는 웹에 쓰이는 하나뿐인 프로그래밍 언어다. 하나뿐이라고 하는 이유는 옵션이 하나뿐이기 때문이다. 
웹에서 웹사이트를 만들고 싶을 때 그리고 그 웹사이트를 interactive로 만들고 싶을 때 쓸 수 있는 것이 JavaScript이다. 
만약 Backend 일을 한다고 하면 언어에 대한 옵션은 많다. Backend로 쓸 수 있는 언어는 Python이나 Ruby도 쓸 수 있다. 
그 외에도 하스켈이나 ASP도 쓸 수 있으며 자바도 가능하다.
근데 만약 Frontend 일을 한다고 하면 쓸 수 있는 언어는 하나뿐이다. 그리고 그 언어가 JavaScript이다!
이것은 Frontend의 장점이기도 하고 단점이이다. 장점은 Fragmentation이 없기 때문이다. 웹사이트를 하는 사람들은 모두 JavaScript를 알기 때문에 
모두 같은 언어로 얘기를 할 수 있다. 문제는 사람들이 이따금씩 JavaScript를 싫어한다. JavaScript에 별로 좋지 않은 부분들이 가끔 나오기 때문이다. 
그리고 우리는 JavaScript에 갇히기도 한다. 
우리가 할 수 있는게 없을 때가 있다. 바꿀 수도 없고, 업데이트도 할 수 없고, 그리고 또 우리가 원하는 것으로 교체할 수도 없다. 그게 문제라면 
문제일 수 있다. 그래도 좋은 뉴스는 JavaScript가 웹에서 쓸 수 있는 하나뿐인 언어라서… 그리고 웹은 계속 빠르게 발전하기 때문에 
JavaScript도 빠르게 발전한다는 점이다. 덕분에 막강해지는 거고 그리고 영향력이 커지고 있다. 
무슨 뜻이냐면 JavaScript를 할 줄 아는 Developer들은 할 수 있는 일이 점점 더 늘어난다는 것이다.
예를 들면 90년대에 JavaScript는 Effects를 넣어줄 용도로 만들어졌다. 예를 들면 웹사이트에 클릭하는 효과 같은걸 위해서 말이다. 
여길 클릭하면 이게 실행이 되고, 제출을 하면 이런게 실행이 되고 x버튼을 누르는 그런 이벤트를 수행하는 효과 말이다. 
JavaScript는 이런 자잘한 이벤트들을 두 개 이상 진행할 수 있게 도와주는 역할을 했었다. 그렇지만 웹이 성장하기 시작하면서 
우린 보다 많은 것들을 실행해야 했다. 그래서 JavaScript로 할 수 있는 것들을 더 많이 만들어냈다. 그렇게 JavaScript는 영향력이 강해졌다. 
간단한 도입설명으로 JavaScript를 배우면 매우 멋진 웹사이트를 만들 수 있고 멋진 웹 앱도 만들어 낼 수 있다. 멋진 모바일 어플리케이션도. 
Native application들이랑 비디오 게임도 만들 수 있다. 그리고 조금 더 욕심을 내면 데스크톱 앱도 만들 수 있다.
Frontend에서 JavaScript를 사용하는지에 대한 이유는 다른 언어로 교체하지 않았기 때문이다. 그리고 전 세계에 있는 컴퓨터들이 이 언어를 쓰기 시작했다. 
모든 컴퓨터에는 브라우져가 있고 브라우져는 JavaScript로 돌아간다. 즉 모든 컴퓨터가 이 언어를 이해한다는 것이다.


5강 ES5, ES6 ES....WTF!?!?

이번에는 JavaScript의 ES5, ES6 등과 관련된 Versions을 살펴본다. JavaScript에 ECMAScript라는 것이 있는데 Specification의 명칭과 같은 것이다. 
ES5는 ECMAScript5와 동일하며 ES6는 ECMAScript6와 동일하다. 이건 그냥 Specification에 대한 업데이트이다. 그럼 Specification이 뭘까? 
JavaScript는 꽤나 중앙 집중화 되어있어서, 누군가 업데이트를 하면 모든 브라우저에서 작동을 하게 된다. 
Specification는 체계 매뉴얼(안내 책자)과 같은 것이다. ‘이걸 읽고 이대로하면 컴퓨터가 이렇게 작동합니다.’와 같은, 
‘이걸 적으면 브라우저는 이렇게 나와야 합니다’ 같은, ‘만약 다른 애용을 적으면 브라우저는 에어를 띄워야 합니다.’ 같은 것을 알려주는 것이다. 
많은 사람들에게 검증 받은 설명문 같은 것이다! 이게 ECMAScript Specification에 대한 설명이다.
브라우저(크롬, Firefox, 익스플로러 등)는 이러한 Specification을 받아서 자기들 방식으로 실행하는 것이다. 
같은 결과를 이루려고 노력하는데 그걸 각자의 방식으로 하는 수행한다. ES5랑 ES6같은 경우는 그냥  Specification의 버전을 나타내주는 것이다. 
예를 들어 구글 크롬은 ES6를 지원한다고 하면 그 말은 구글 크롬 개발자들이 새로운 Specification을 시행했다고 볼 수 있는 것이다. 
새로운 안내문을 발행한 것과 같은 것이다. 
우리가 다루고자 하는 것은 ES5, ES6, Es2016 등등 각각의 기능을 보는 것이 아니다. 그냥 일반적은 JavaScript에 다루고자 한다. 
그래서 어떤 버전의 ES를 배울지 걱정하지 않아도 된다. 지금 ES5, ES6, ES4가 각각 뭔지 아는 것은 중요하지 않다. 
가끔 사람들이 묻는 질문 중에 JavaScript랑 ES6 중 어떤 걸 먼저 배워야할까라는 질문이 있다. 
ES5를 해야 할까 아니면 바닐라 자바스크립트를 배워야 할까? 버전은 어떤 걸 배워야할지 걱정하지말자! 그냥 바닐라 자바스크립트를 배우자. 
바닐라 자바스크립트는 JavaScript의 한 종류로 Library 없는 것을 얘기한다. 화장이 없는, 도움이 없는, 조리가 되지 않은 날 것의 JavaScript이다.


6강 VanillaJS

JavaScript가 굉장히 못생겼다는 걸 실감하게 될 것이다. 왜냐하면 이 언어가 오래되었기 때문에 어느 부분에서는 그럴 수 있다. 
그리고 업데이트를 할 수 없는 오래된 것의 경우 임시방편으로 떼워야 하는 경우가 있다. 예를 들어서 JavaScript를 쓰는 많은 웹사이트들이 있다. 
그 중 몇은 엄청 오래된 버전의 JavaScript를 쓸거고 전부 업데이트 해줄 수 없기 때문에 JavaScript를 180도 다르거나 모던하게 바꿔줄 수 없다. 
만약 그럴 경우 엄청나게 많은 인터넷 사이트들이 망가질 것이다. 이른바 엑박이 뜨는 것이다. 그리고 우린 그런 일이 일어나길 원치 않는다. 
바닐라 자바스크립트는 브라우저를 통해 제공된 JavaScript라고 보면된다. 온갖 임시방편과 지저분한 것들. 
항상 사람들이 바닐라 자바스크립트에 대해 언급하는 것들이다. 어떤 사람들은 바닐라 자바스크립트를 사용하지 않고 커피스크립트 같은걸 배운다. 
좀 세련된 버전의 JavaScript이다. 또 어떤 사람들은 JavaScript를 엄청 현대적으로 바꾸는 법을 배우기도 하고 몇몇은 JavaScript를 묶어내는 걸 
사용하기도 한다. 예를 들어서 누군가가 매우 현대적이지만 지지받지 못한 JavaScript를 만들었고 compiler 안에 실행시켰다. 
일단 명칭 자체는 신경쓰지말고 그냥 여기 코드를 상자 안에 넣었다고 상상해보자. 그리고 그 박스가 컴파일된 JavaScript를 전부 모든 브라우져에 뱉어낸다. 
결과적으로 세련된 JavaScript를 만들었지만 결국 받게 되는건 컴파일된 못생긴 JavaScript인 것이다. 
그리고 이게 이따금씩 문제가 되는데 왜냐하면 JavaScript에 재능을 가진 사람을 찾는 게 매우 어려운 일이다. 
많은 사람들이 Library랑 Framework를 알고 있을 것이다. 리액트나 Jquery를 아는 사람들을 찾기 쉽다. 
Library를 다룰 줄 알거나 Framework에 대한 전문가들은 찾기 쉽다. 
이전에 얘기했듯이 Library나 Framework는 메이크업, 화장 같은 존재이며 JavaScript를 원래 모습보다 조금 더 예쁘게 만들어주는거라 배우기 쉽다. 
이런 사람들은 Framework에서만 전문가이다. 실제 필드에서는 실력발휘를 못한다. 
만약 포토샵을 예시로 알려준다면 포토샵을 잘 다루는데 색감에 대한 센스가 없는 사람이라고 생각해보자. 색의 구성에 대해 아무것도 모르고, 
멋진 사진이 뭔지 감각이 없는 사람. 색상에 대한 이해도가 낮고, 사진의 퀄리티에 대한 기준이 없는 사람. 
이게 바로 JavaScript를 제대로 모르고 사용하는 사람에 대한 설명이다. 그러나 사람들은 어려운 바닐라 자바스크립트는 잘 모른다. 
그래서 바닐라 자바스크립트를 처음에 배우는 게 좋을 것 같다. 바닐라 자바스크립트를 쓰는게 능숙해질 때 다음으로 넘어가자.  

Vanilla JS is a fast, lightweight, cross-flatform framework for building incredible, powerful JavaScript applications.

1. Vanilla JS : document.getElementById(‘test-table’);
2. Dojo : dogo.byId(‘test-table’);
3. Prototype JS : $(‘test-table’)
4. jQuery : $jq(‘#test-table);
5. YUI : YAHOO.util.Dom.get(‘test-table’);
6. MooTools : document.id(‘test-table’)

예를 들어 내가 JavaScript에서 ID를 갖고 싶으면 HTML 파일로 들어가고 싶으면 아이디 하나를 잡고 JavaScript에서 화면에 보이는 1번을 이용해야 한다. 
하지만 만약 내가 Dojo같은 걸 이용한다면 2번을 써야한다. PrototypeJS를 쓰면 3번을 복사해서 쓰고, Jquery를 쓰면 4번을 쓰고. 
만약 Yahoo UI를 쓰면 5번을 쓰면 되고, MooTools면 6번을 쓰면 된다.
그리고 이 전부가 맨 위에 적힌 바닐라 자바스크립트의 이걸 다른 프로그램에서 실행하기 위한 코드이다. 
이게 Dojo나 Jquery같은 게 아닌 Vanilla JS를 추천하는 이유이다. 나Make-up(대체할 수 있는 것)이 아닌 실질적인 걸 추천하고자 한다. 
여기 전부가 1번을 다르게 해석한 것일 뿐이다. 일반 JavaScript가 다른 것들에 비해 엄청 빠르다. 120만개가 넘는 Operation을 1초에 할 수 있다. 

Vanilla JS를 잘하게 되고 더 많이 알게 되면, 리액트와 같은 다른 언어로 넘어갈 때도, 아무런 문제가 없을 것이다. 
다른 언어를 시작할 때 문제가 없을 거라는 얘기이다. 비디오 게임이나 다른 것들을 만들 때도. JavaScript의 영향력을 알게 될 것이다. 
업무를 하면서 마주하는 거의 모든 Library를 이해할 수 있게 될 것이다. 모든 웹의 베이스가 되는 언어를 알게 될 것이니까. 
Vanilla JavaScript를 배운다는 건 웹에서의 기초가 되는 언어를 배우는 것과 같다. 나중에 다 보게 될 것이지만 이 언어는 예쁘고 우아하지는 않고 
오히려 답답한 부분이 굉장히 많을 것이다. 그러나 웹상에서 본 모든 것들은 이 언어로 구성이 되어있다. 그래서 이 언어가 강력하다. 


7강 Hello World with JavaScript

먼저, JavaScript를 어떻게 페이지에 추가하는지 알아야 한다. 그냥 평범한 HTML를 만들어보자. <link rel="stylesheet" href="index.css" />를 통해 
CSS를 웹사이트에 넣는다


index.html
<!DOCTYPE html>
<html>
  <head>
    <title>Something</title>
    <link rel="stylesheet" href="index.css" /> 
  </head>
  <body>
    <h1>This works!!</h1>
  </body>
</html>


이제 index CSS로 가서 제대로 작동되는지 확인해보자.


index.css
body{
  background-color:peru;
}

h1{
  color:white
}


설정한 배경색과 폰트색이 제대로 작동하는 것을 확인할 수 있다. 이제 JS파일을 추가하자. JS파일을 추가하는건 매우 간단하다. 
JS파일은 항상 Body 아래에 있어야 한다. 제일 마지막에 추가를 한다. 


index.html
<!DOCTYPE html>
<html>
  <head>
    <title>Something</title>
    <link rel="stylesheet" href="index.css" /> 
  </head>
  <body>
    <h1>This works!!</h1>
    <script src="index.js"></script>
  </body>
</html>

 
JavaScript가 제대로 실행되는지 보려면 테스트를 진행하기 위해 경고 메시지를 만들어보자. 


index.js
alert('Hello World');


경고메세지가 제대로 실행 되었다. JavaScript로 Hello World를 수행하였다.


index.js
console.log('Hello World');


이렇게 수정하면 console에 메시지가 출력된다. 여기 보이는 것처럼 HTML CSS에 JavaScript 파일을 추가하는 건 매우 쉽고 심플하다. 
심플한 이유는 전에 말했듯이 모든 웹브라우저에는 JavaScript가 설치되어 있어서이다. 보통 소프트웨어 제품을 만들 때 Haskell이라는 언어를 사용했다고 
가정하면 소프트웨어가 만들어졌고, 오픈을 해야할 때 
언어에 따라 다르지만 이따금씩 내 컴퓨터에서 Haskell을 이해하기 위해 Haskell을 설치해야 하는 경우가 있다. 이런 점이 가끔 불편하게 느껴질 때가 있다. 
왜냐면 사람들이 모든 언어를 가지고 있지 않아서 다운로드를 받아야 하는데 이건 상당히 번거로운 작업이 될 수 있다. 
JavaScript 같은 경우엔 아무도 다운로드를 하지 않아도 된다. 브라우저와 같이 이미 구성이 되어있기 때문이다. 이 점이 JavaScript가 강력한 이유이다. 
브라우저는 우리가 준 명령어를 알아들었고 우리는 그저 여기에 이렇게 적기만 했을 뿐이다. 


8강 What are we learning

사람들로부터 ‘JavaScript를 배우면 Python도 배울 수 있게 될까? Ruby도 배울 수 있을까?’ 그리고 ‘그 언어들은 각각 얼마나 달라?’라는 질문들을 
자주 받는다. 여기서 배우는 건 단순히 JavaScript가 아닌 모든 언어에서 일맥상통한 컨셉이다. Haskell과 같은 조금 힘든 언어들 같은 경우엔 보다 
더 많거나 적을 수는 있지만 컨셉은 대충 비슷하다. Function을 배우고 Variable을 배우고 그 외에 조건들을 배우는 것이다. 
이벤트도 배우고 모든 사람들에게서 오지 않은 이벤트에 관해서도 배운다. 그리고 Class, Objects, Arrays 등등 다른 많은 언어에서도 같은 모든 걸 배운다.
예를 들어서 console log를 Python이었으면 Console log 대신 print(‘ ’)라고 작성한다. 그러면 console log랑 똑같이 실행이 된다. 
당연히 브라우저에서 print는 실행이 되지 않으므로 여기서는 에러로 뜨겠지만 이와 같은 컨셉과 중요한 단어들에 대해 배울 것이다.


9강 Your first JS Variable

변수란 변경되거나 변경될 수 있는 것을 의미한다. 수학으로 한 번 생각해본다면, 변수는 A가 될 수 있으며 A는 바뀔 수 있다. 
이 뜻은 A는 지금 아무 것도 아니지만 2로 바꿀 수 있다. A는 존재하지 않았지만, ‘지금은 A가 있고. A는 2야’ 이렇게 만들었다. 
그리고 이제 이걸 221로 바꾸고 싶다. 이것이 변수이다. 


index.js
a = 221
b = a-5
console.log(b)


JavaScript는 자식을 훈육하지 않는 아빠와 같다. JavaScript는 소스를 최대한 이해하고 실행하기 위해 최선을 다할 것이다. 
심지어 그게 좋은 문법이 아니더라도 말이다. 그래서 만약 문법을 철저하게 지켜서 만들려면, 몇 가지를 주의해야 한다. 
보통 프로그래밍 세계에서는 instructions은 다른 라인에 있어서, 만약 같은 줄에 적으면 에러가 생길 것이다. 
이제 이 라인들을 ‘Lines’이라고 부르는 대신에 ‘Expressions’이라고 부를 것이다. 모든 expressions는 한 줄에 있어야 한다. 
모든 instructions도 한 줄에 있어야 하듯이. 한 expresstion이 끝나는 곳을 선언하는 방법은 ‘;’을 추가하는 것이다. 
다른 문법은 변수를 이렇게 시작하면 안 된다는 점이다. 두 종류의 변수가 있기 때문이야. 기본적으로 이런 방식은 좋은 방법이 아니다. 
우리가 필요한 건 이 변수의 시작에 무언가를 더해주는 것이다. 변수를 만들고 싶을 때는 기본적으로 이렇게 작동한다. 
먼저 변수를 생성(Create)하고, 다음으로 이걸 초기화(Initialize)하고, 그리고 사용(Use)하면 된다. 필요할 때는 생성과 초기화를 동시에 할 수 있다. 
그리고 나중에 사용할 수 있다. 규칙은 바로 변수를 초기화하기 전에 ‘let’을 넣어야 한다. 
변수를 초기화하거나 생성할 때에는 ‘let’을 쓴다. 이미 생성된 것을 사용할 때는 ‘let’을 사용하지 않고 단지 참조만 하면 된다. 
만약 ‘let’을 지우고 전처럼 다시 돌려놓으면, 이미 초기화하고 사용하는 것처럼 작동한다. 그러나 이것은 좋은 방법이 아니다.  


10강 let, const, var

가끔은 특정 변수의 값이 변하지 않기를 바란다. 프로그래머들이 변수의 값을 바꿈으로서 의도치 않은 작동이 수행될 때 에러를 눈치채지 못하거나 
무슨 일이 일어났는지 알 수 없기 때문에 엄청 혼란스러울 수 있다. 그래서 이걸 해결하기 위해서 let 대신에 const라는 걸 사용할 것이다. 
const는 constant, 상수라는 뜻이며 안정적(Stable – It doesn’t change)이라는 뜻이다. JavaScript는 const에 대해서 이렇게 반응할 것이다. 
“잠깐만, A는 상수의 221이라고 했잖아. 왜 바꾸려고 하는거야? 너는 바꿀 수 없어.”라는 의미의  Assignment to constant variable. 
만약 변수를 바꿀 수 없게 하려면 const를 사용해야한다. 변수가 바뀌어도 괜찮다면, let을 사용해야 한다. 이것이 let과 const의 유일한 다른 점이다. 
var은 variable을 뜻한다. 사실 var의 문제는 별로 많지 않지만 이것의 문제는 JavaScript가 var을 적용한 이상한 규칙이 있다. 
그리고 let을 쓴 것처럼 var도 값을 바꿀 수 있다. 아마 3년 전에 const나 let이 없고 var만 쓸 수 있었다. 


11강 Data Types on JS

본격적으로 들어가기 전에 우리가 여기에 뭘 저장할지 미니노트를 여기에 해보자. 코멘트라는 건데, 일명 코멘트(주석)라 한다. 
너의 코드에 남길 수 있는 노트 같은 것이다. 코멘트(주석처리) 되지 않는 모든 코드는 프로그램이 실행하려고 한다. 때론 그게 싫을 때가 있다. 
본인만을 위한 노트를 코드에 적고 싶을 때가 있고 메모하고 싶을 때도 있다. 
//는 한줄처리 주석이며, 멀티라인 코멘트는 앞에 /*를 넣고 끝에 */를 넣으면 된다. 
지금 잠시 얘기하자면, 변수를 선언할 때는 기본으로 const를 쓰도록 하자. 필요할 때까지 let 쓰지 말자. 첫 사용은 const로, 진짜 필요할 때만 let!


// String
const what = “Nicolas”;


먼저 변수에 저장해보자. 저장한다는 의미는 이걸 저기에 넣는다는 뜻이다. String을 해보자. 보통 스트링은 텍스트 스트링을 말한다. 
“Nicolas”라고 입력해보자. 그럼 내 텍스트가 저장된다. 만약에 내가 “”를 제거하면 프로그램은 Nicolas라는 키워드를 어디선가 찾으려고 할 것이다. 
근데 찾을 수 없으므로 문제가 발생한다. 에러 메시지를 보면 “Nicolas is not defined”라고 출력된다.
왜냐하면 프로그램은 NMicolas가 what 같은 거라고 본다. Nicolas가 어딘가 있는데 찾을 수 없는 것이라고 보는 것이다. 
아직 존재하지 않으니까. 만약에 “”를 넣어주면 이제 Nicolas가 존재하고 문제없이 실행된다. 이제 consol.log를 해보자. 
그럼 what은 Nicolas라고 나온다. 어떤 텍스트든 저장할 수 있다. 이모티콘도 텍스트니 가능하다. 
만약 “” 사이에 숫자를 넣으면 숫자가 아니라 텍스트이다.


// Boolean
const wat = false;


Boolean이란 True or False이다. Boolean은 true 또는 false 값을 가진다. 모두 소문자로 쓰고, 텍스트가 아니므로 “” 없이 쓴다. 
바이너리 세계에선(이진법) 모든 것은 0 or 1이다. true는 1, false는 0이다. 


// Number
const wat = 555;


숫자가 다음과 같다. 


// float
const wat = 55.1;


float는 숫자인데 flaoting number(떠돌이 소숫점)를 가지고 있다. .1처럼 떠돌이 소숫점이 있는 것이다.

